import React, { useState, useEffect, useMemo } from 'react';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Input } from '../ui/Input';
import { Checkbox } from '../ui/Checkbox';
import {
  Search,
  Filter,
  Download,
  MoreVertical,
  UserPlus,
  X,
  Trash2,
  Eye,
  RefreshCw,
} from 'lucide-react';
import { format, isValid } from 'date-fns';
import { useAuth } from '../../contexts/AuthContext';
import { useToastContext } from '../ToastProvider';
import { db } from '../../firebase';
import {
  collection,
  query,
  orderBy,
  onSnapshot,
  deleteDoc,
  doc,
} from 'firebase/firestore';
import WaitlistDrawer from './WaitlistDrawer';

interface WaitlistEntry {
  id: string;
  email: string;
  name: string | null;
  source?: string;
  status:
    | 'pending'
    | 'confirmed'
    | 'invited'
    | 'blocked'
    | 'rejected'
    | 'active';
  createdAt: Date;
  notes?: string;
  locale?: string;
  utm?: {
    source?: string;
    medium?: string;
    campaign?: string;
  };
  userAgent?: string;
  ip?: string;
  comms?: {
    confirmation?: {
      sent: boolean;
      sentAt: Date | null;
    };
  };
}

type WaitlistStatus =
  | 'all'
  | 'pending'
  | 'confirmed'
  | 'invited'
  | 'blocked'
  | 'rejected'
  | 'active';

// Helper function to safely convert Firestore timestamps to Date
const safeToDate = (timestamp: any): Date | null => {
  if (!timestamp) return null;
  
  try {
    // If it's already a Date, return it
    if (timestamp instanceof Date) {
      return isValid(timestamp) ? timestamp : null;
    }
    
    // If it's a Firestore Timestamp, convert it
    if (timestamp && typeof timestamp.toDate === 'function') {
      const date = timestamp.toDate();
      return isValid(date) ? date : null;
    }
    
    // If it's a number (milliseconds), create Date
    if (typeof timestamp === 'number') {
      const date = new Date(timestamp);
      return isValid(date) ? date : null;
    }
    
    // If it's a string, try to parse it
    if (typeof timestamp === 'string') {
      const date = new Date(timestamp);
      return isValid(date) ? date : null;
    }
    
    return null;
  } catch (error) {
    console.warn('Error converting timestamp to date:', error);
    return null;
  }
};

const WaitlistPanel: React.FC = () => {
