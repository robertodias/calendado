rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Waitlist collection rules
    match /waitlist/{document} {
      // Allow anyone to create waitlist entries (public signup)
      // but validate the data structure
      allow create: if 
        request.auth == null && // Only allow unauthenticated requests
        request.resource.data.keys().hasAll(['email', 'createdAt', 'status', 'comms', 'dedupeKey']) &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$') &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.status == 'pending' &&
        request.resource.data.comms.confirmation.sent == false &&
        request.resource.data.comms.confirmation.sentAt == null &&
        request.resource.data.comms.confirmation.messageId == null &&
        request.resource.data.comms.confirmation.error == null &&
        request.resource.data.dedupeKey is string &&
        request.resource.data.dedupeKey.size() == 64; // SHA256 hex length
      
      // Allow reading for duplicate email checking (public read for email validation)
      // This is needed for the duplicate email check functionality
      allow read: if true;
      
      // Prevent updates and deletes from client
      allow update, delete: if false;
    }
    
    // Email events collection - server only
    match /email_events/{document} {
      allow read, write: if false;
    }
    
    // Dead letter queue - server only
    match /email_dlq/{document} {
      allow read, write: if false;
    }
    
    // TODO: Add user profiles collection rules
    // match /users/{userId} {
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    // }
    
    // TODO: Add bookings collection rules
    // match /bookings/{bookingId} {
    //   allow read, write: if request.auth != null;
    //   allow create: if true; // Allow public booking creation
    // }
    
    // TODO: Add calendar events collection rules
    // match /events/{eventId} {
    //   allow read, write: if request.auth != null;
    // }
    
    // TODO: Add notifications collection rules
    // match /notifications/{notificationId} {
    //   allow read, write: if request.auth != null && 
    //     request.auth.uid == resource.data.userId;
    // }
    
    // TODO: Add admin-only collections
    // match /admin/{document} {
    //   allow read, write: if request.auth != null && 
    //     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
    //     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }
    
    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
