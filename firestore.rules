rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // PLATFORM-LEVEL RULES
    // ============================================================================
    
    // Platform superadmin has full access to everything
    function isPlatformAdmin() {
      return request.auth != null && 
        request.auth.token.platformAdmin == true;
    }
    
    // Check if user has any of the required platform roles
    function hasAnyPlatformRole(roles) {
      return request.auth != null && 
        request.auth.token.roles != null &&
        request.auth.token.roles.hasAny(roles);
    }
    
    // Check if user has a specific role for an organization
    function hasOrgRole(orgId, role) {
      return request.auth != null && 
        request.auth.token.roles != null &&
        request.auth.token.roles[orgId] == role;
    }
    
    // Check if user has any of the specified roles for an organization
    function hasAnyOrgRole(orgId, roles) {
      return request.auth != null && 
        request.auth.token.roles != null &&
        request.auth.token.roles[orgId] in roles;
    }
    
    // Check if user is a member of an organization (has any role)
    function isOrgMember(orgId) {
      return request.auth != null && 
        request.auth.token.roles != null &&
        request.auth.token.roles[orgId] != null;
    }
    
    // ============================================================================
    // PUBLIC COLLECTIONS
    // ============================================================================
    
    // Public links - readable by anyone, writable by platform admin or org members
    match /publicLinks/{linkId} {
      allow read: if true; // Public read access
      allow write: if isPlatformAdmin() || 
        (request.auth != null && 
         request.resource.data.orgId != null && 
         isOrgMember(request.resource.data.orgId));
    }
    
    // Waitlist collection - public signup with validation
    match /waitlist/{document} {
      // Allow anyone to create waitlist entries (public signup)
      allow create: if 
        request.auth == null && // Only allow unauthenticated requests
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$') &&
        request.resource.data.email.size() <= 254 &&
        request.resource.data.status == 'pending' &&
        (request.resource.data.name == null || 
         (request.resource.data.name is string && 
          request.resource.data.name.size() <= 100 &&
          !request.resource.data.name.matches('.*[<>].*'))) &&
        (request.resource.data.language == null || 
         request.resource.data.language in ['en', 'pt']) &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.comms is map &&
        request.resource.data.dedupeKey is string &&
        (request.resource.data.captchaToken == null || 
         request.resource.data.captchaToken is string) &&
        request.resource.data.captchaVerified is bool;
      
      // Allow reading for duplicate email checking (public read for email validation)
      allow read: if true;
      
      // Prevent updates and deletes from client
      allow update, delete: if false;
    }
    
    // ============================================================================
    // PLATFORM ADMIN COLLECTIONS
    // ============================================================================
    
    // User profiles collection - platform admin or own profile
    match /users/{userId} {
      allow read: if isPlatformAdmin() || 
        (request.auth != null && request.auth.uid == userId);
      
      allow create: if isPlatformAdmin() || 
        (request.auth != null && 
         request.auth.uid == userId &&
         !('roles' in request.resource.data) && // Prevent client from setting roles
         request.resource.data.uid == userId &&
         request.resource.data.email is string);
      
      allow update: if isPlatformAdmin() || 
        (request.auth != null && 
         request.auth.uid == userId &&
         !('roles' in request.resource.data) && // Prevent client from modifying roles
         (!('roles' in resource.data) || request.resource.data.roles == resource.data.roles));
      
      allow delete: if isPlatformAdmin();
    }
    
    // Platform admin collections
    match /admin/{document} {
      allow read, write: if isPlatformAdmin();
    }
    
    match /admin/{logDocId}/entries/{entryId} {
      allow read, write: if isPlatformAdmin();
    }
    
    // Email events and dead letter queue - server only
    match /email_events/{document} {
      allow read, write: if false;
    }
    
    match /email_dlq/{document} {
      allow read, write: if false;
    }
    
    // ============================================================================
    // ORGANIZATION COLLECTIONS
    // ============================================================================
    
    // Organization documents
    match /orgs/{orgId} {
      // Read: platform admin or org members
      allow read: if isPlatformAdmin() || isOrgMember(orgId);
      
      // Write: platform admin, owner, or org_admin
      allow write: if isPlatformAdmin() || 
        hasAnyOrgRole(orgId, ['owner', 'org_admin']);
      
      // Create: platform admin only
      allow create: if isPlatformAdmin();
      
      // Delete: platform admin or owner only
      allow delete: if isPlatformAdmin() || hasOrgRole(orgId, 'owner');
    }
    
    // Store subcollections
    match /orgs/{orgId}/stores/{storeId} {
      // Read: platform admin, org members, or public if org is public
      allow read: if isPlatformAdmin() || 
        isOrgMember(orgId) ||
        (request.auth == null && 
         get(/databases/$(database)/documents/orgs/$(orgId)).data.public == true);
      
      // Write: platform admin, org_admin, or store_manager
      allow write: if isPlatformAdmin() || 
        hasAnyOrgRole(orgId, ['org_admin', 'store_manager']);
      
      // Create: platform admin, org_admin, or store_manager
      allow create: if isPlatformAdmin() || 
        hasAnyOrgRole(orgId, ['org_admin', 'store_manager']);
      
      // Delete: platform admin or org_admin only
      allow delete: if isPlatformAdmin() || hasOrgRole(orgId, 'org_admin');
    }
    
    // Professional subcollections
    match /orgs/{orgId}/professionals/{professionalId} {
      // Read: platform admin, org members, or public if org is public
      allow read: if isPlatformAdmin() || 
        isOrgMember(orgId) ||
        (request.auth == null && 
         get(/databases/$(database)/documents/orgs/$(orgId)).data.public == true);
      
      // Write: platform admin, org_admin, store_manager, or own profile
      allow write: if isPlatformAdmin() || 
        hasAnyOrgRole(orgId, ['org_admin', 'store_manager']) ||
        (request.auth != null && 
         request.resource.data.userId == request.auth.uid);
      
      // Create: platform admin, org_admin, or store_manager
      allow create: if isPlatformAdmin() || 
        hasAnyOrgRole(orgId, ['org_admin', 'store_manager']);
      
      // Delete: platform admin or org_admin only
      allow delete: if isPlatformAdmin() || hasOrgRole(orgId, 'org_admin');
    }
    
    // ============================================================================
    // INVITATION SYSTEM
    // ============================================================================
    
    // Invites collection
    match /invites/{inviteId} {
      // Read: platform admin or the invited user
      allow read: if isPlatformAdmin() || 
        (request.auth != null && 
         request.resource.data.email == request.auth.token.email);
      
      // Write: platform admin or org members (for creating invites)
      allow write: if isPlatformAdmin() || 
        (request.auth != null && 
         request.resource.data.orgId != null && 
         isOrgMember(request.resource.data.orgId));
      
      // Create: platform admin or org members
      allow create: if isPlatformAdmin() || 
        (request.auth != null && 
         request.resource.data.orgId != null && 
         isOrgMember(request.resource.data.orgId));
      
      // Delete: platform admin or org members
      allow delete: if isPlatformAdmin() || 
        (request.auth != null && 
         request.resource.data.orgId != null && 
         isOrgMember(request.resource.data.orgId));
    }
    
    // ============================================================================
    // DEFAULT DENY
    // ============================================================================
    
    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}