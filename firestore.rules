rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Waitlist collection rules
    match /waitlist/{document} {
      // Allow anyone to create waitlist entries (public signup)
      // Enhanced security with stricter validation
      allow create: if 
        request.auth == null && // Only allow unauthenticated requests
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$') &&
        request.resource.data.email.size() <= 254 &&
        request.resource.data.status == 'pending' &&
        (request.resource.data.name == null || 
         (request.resource.data.name is string && 
          request.resource.data.name.size() <= 100 &&
          !request.resource.data.name.matches('.*[<>].*'))) &&
        (request.resource.data.language == null || 
         request.resource.data.language in ['en', 'pt']) &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.comms is map &&
        request.resource.data.dedupeKey is string;
      
      // Allow reading for duplicate email checking (public read for email validation)
      // This is needed for the duplicate email check functionality
      allow read: if true;
      
      // Prevent updates and deletes from client
      allow update, delete: if false;
    }
    
    // Email events collection - server only
    match /email_events/{document} {
      allow read, write: if false;
    }
    
    // Dead letter queue - server only
    match /email_dlq/{document} {
      allow read, write: if false;
    }
    
    // TODO: Add user profiles collection rules
    // match /users/{userId} {
    //   allow read, write: if request.auth != null && request.auth.uid == userId;
    // }
    
    // TODO: Add bookings collection rules
    // match /bookings/{bookingId} {
    //   allow read, write: if request.auth != null;
    //   allow create: if true; // Allow public booking creation
    // }
    
    // TODO: Add calendar events collection rules
    // match /events/{eventId} {
    //   allow read, write: if request.auth != null;
    // }
    
    // TODO: Add notifications collection rules
    // match /notifications/{notificationId} {
    //   allow read, write: if request.auth != null && 
    //     request.auth.uid == resource.data.userId;
    // }
    
    // TODO: Add admin-only collections
    // match /admin/{document} {
    //   allow read, write: if request.auth != null && 
    //     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
    //     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    // }
    
    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
